"""
Django settings for rentmyvr_back project.

Generated by 'django-admin startproject' using Django 4.1.5.

For more information on this file, see
https://docs.djangoproject.com/en/4.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.1/ref/settings/
"""

import os
import re
import sys
import logging
from pathlib import Path
from django.conf import settings
from distutils.debug import DEBUG
from decouple import config, Csv

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = config('SECRET_KEY')
PROJECT_NAME = "rentmyvr_back"
PROJECT_TITLE = "Rent My VR"
COMPANY_NAME = "Rent My VR"

RECAPTCHA_SECRET_KEY = config('RECAPTCHA_SECRET_KEY')

DEFAULT_COY_PK = config("DEFAULT_COY_PK", default="7c665fde0492431f967ef7d3a6fe74e6")
DEFAULT_COY_NAME = config("DEFAULT_COY_NAME", default="Rent My VR")

# SECURITY WARNING: don't run with debug turned on in production!

DEBUG = config('DEBUG', default=True, cast=bool)
LOGGING_LEVEL = config('LOGGING_LEVEL', default='INFO')

# ALLOWED_HOSTS = config('ALLOWED_HOSTS', default='*', cast=Csv())
ALLOWED_HOSTS = ['*']
BACK_SERVER = config('BACK_SERVER', default='https://api.rentmyvr.com')
FRONT_SERVER = config('FRONT_SERVER', default='https://rentmyvr.com')
PAGE_SIZE = 1000

ADMIN_EMAILS = ['pauldiconline@gmail.com', ]
EMAIL_PROCESSOR_ID = 'bc74e88b-c2a9-47d6-93a8-1228526b935b'
SYSTEM_USER_ID = config("SYSTEM_USER_ID", default='bc74e88b-c2a9-47d6-93a8-1228526b935b')
CODE_BASED_ACTIVATION = True
IS_MULTITENANT = False

# Stripe
STRIPE_PUBLISHABLE_KEY = config('STRIPE_PUBLISHABLE_KEY', default='')
STRIPE_SECRET_KEY = config('STRIPE_SECRET_KEY', default='' )
STRIPE_ENDPOINT_SECRET = config('STRIPE_ENDPOINT_SECRET', default='' )

DOMAIN = config('DOMAIN', default='rentmyvr.com')
DOMAIN_URL = config('DOMAIN_URL', default=f'https://{DOMAIN}')
AUTH_TOKEN_LENGTH = 6

APPEND_SLASH = True
ADMIN_URL = 'access/'
LOGIN_URL = 'auths:login'
LOGOUT_URL = 'auths:logout'
LOGIN_REDIRECT_URL = 'core:dashboard'
LOGOUT_REDIRECT_URL = 'core:index'

ADMIN_MAX_SHOW_ALL = 5000
ADMIN_PER_PAGE = 200

DATA_UPLOAD_MAX_NUMBER_FIELDS = 15000
MAX_UPLOAD_SIZE = 26214400
# 2.5MB - 2621440
# 5MB - 5242880
# 10MB - 10485760
# 20MB - 20971520
# 50MB - 5242880
# 100MB 104857600
# 250MB - 214958080
# 500MB - 429916160

# Whether to send the SMTP Date header of email messages in the local time zone (True) or in UTC (False).
EMAIL_USE_LOCALTIME = False
EMAIL_TIMEOUT = 30

MAX_EMAIL_ATTACHMENT_SIZE = "10485760"

EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
DEFAULT_FROM_EMAIL = config('DEFAULT_FROM_EMAIL', default='localhost')
EMAIL_HOST = config('EMAIL_HOST', default='localhost')
EMAIL_HOST_USER = config('EMAIL_HOST_USER', default='')
EMAIL_HOST_PASSWORD = config('EMAIL_HOST_PASSWORD', default='')
EMAIL_PORT = config('EMAIL_PORT', default=587, cast=int)
EMAIL_USE_TLS = config('EMAIL_USE_TLS', default=True, cast=bool)
EMAIL_NO_REPLY = config('EMAIL_NO_REPLY', default="")

EMAIL_SENDER_ID = "admin@admin.com"

EMAIL_CONNECTIONS = {
    'default': {
        'host': EMAIL_HOST,
        # 'username': EMAIL_HOST_USER,
        # 'password': EMAIL_HOST_PASSWORD,
        'port': EMAIL_PORT,
        'use_tls': EMAIL_USE_TLS,
    },
    'no-reply': {
        'host': config('NO_REPLY_EMAIL_HOST', default='localhost'),
        'username': EMAIL_NO_REPLY,
        'password': config('NO_REPLY_EMAIL_HOST_PASSWORD', default=''),
        'port': config('NO_REPLY_EMAIL_PORT', default=587, cast=int),
        'use_tls': config('NO_REPLY_EMAIL_USE_TLS', default=True, cast=bool),
    },
}


# Application definition

INSTALLED_APPS = [
    'auths.apps.AuthsConfig',
    'core.apps.CoreConfig',
    'directory.apps.DirectoryConfig',
    'payment.apps.PaymentConfig',
    'schedule.apps.ScheduleConfig',

    'auths_api.apps.AuthsApiConfig',
    'core_api.apps.CoreApiConfig',
    'directory_api.apps.DirectoryApiConfig',
    'payment_api.apps.PaymentApiConfig',
    'schedule_api.apps.ScheduleApiConfig',

    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.sites',
    'django.contrib.gis',
    
    'django_celery_beat',
    
    # rest framework
    'rest_framework_xml',
    'rest_framework',
    'rest_framework_gis',
    'rest_framework.authtoken',
    
    # all auth
    'allauth',
    'allauth.account',
    'allauth.socialaccount',
    
    'notifications',
    'notifications_api',

    'import_export',
    'corsheaders',
    'drf_yasg',
]

if DEBUG:
    INSTALLED_APPS.append("sslserver")
    INSTALLED_APPS.append("debug_toolbar")

SITE_ID = 1

ACCOUNT_AUTHENTICATION_METHOD = 'email'
ACCOUNT_EMAIL_REQUIRED = True
ACCOUNT_UNIQUE_EMAIL = True
ACCOUNT_USERNAME_REQUIRED = False
ACCOUNT_AUTHENTICATED_LOGIN_REDIRECTS = False

AUTH_ACTIVATION_REQUIRED = True
AUTH_SIGN_IN_BY = "email"
AUTH_REQUIRE_PHONE = False
AUTH_USER_MODEL = "auths.User"
AUTH_AUTO_GENERATE_PASSWORD_ON_CREATE = True
AUTH_TRACK_CLIENT = True
PROFILE_IS_REQUIRED = False
# DEFAULT_BACKEND = 'auths.overrides.auth_backend.SDBackend'


REST_FRAMEWORK = {
    "DEFAULT_PAGINATION_CLASS": "rest_framework.pagination.PageNumberPagination",
    # 'DEFAULT_PAGINATION_CLASS': 'core_api.pagination.MyPagination',
    'DEFAULT_AUTHENTICATION_CLASSES': [
       'rest_framework.authentication.TokenAuthentication',
    #    'rest_framework.authentication.SessionAuthentication',
    ],    
    'DEFAULT_FILTER_BACKENDS': [
        'django_filters.rest_framework.DjangoFilterBackend'
    ],
    'DATE_INPUT_FORMATS': ["%d-%m-%Y", "%m/%d/%Y", "%d.%m.%Y"],
    'DEFAULT_PARSER_CLASSES': [
        'rest_framework.parsers.JSONParser',
    ],
}

if DEBUG:
    REST_FRAMEWORK['DEFAULT_RENDERER_CLASSES'] = (
        # Needed disable the browseable API in production with this configuration
        # If you're performance testing, you will want to use the browseable API
        # without forms, as the forms can generate their own queries.
        # If performance testing, enable:
        # 'example.utils.BrowsableAPIRendererWithoutForms',
        # Otherwise, to play around with the browseable API, enable:
        'rest_framework.renderers.JSONRenderer',
        'rest_framework.renderers.BrowsableAPIRenderer',
        'rest_framework_xml.renderers.XMLRenderer',
    )
    import socket  # only if you haven't already imported this
    hostname, _, ips = socket.gethostbyname_ex(socket.gethostname())
    INTERNAL_IPS = [ip[: ip.rfind(".")] + ".1" for ip in ips] + ["127.0.0.1", "10.0.2.2"]
else:
    REST_FRAMEWORK['DEFAULT_RENDERER_CLASSES'] = (
        'rest_framework.renderers.JSONRenderer',
    )


CORS_ORIGIN_ALLOW_ALL = True
# CORS_ALLOW_CREDENTIALS = True
# CORS_ORIGIN_WHITELIST = [
#     'http://localhost:3000', 'https://localhost:3000',
#     'http://localhost:3002', 'https://localhost:3002',
#     'http://localhost:8081', 'https://localhost:8081',
#     'http://softdongle.info:3000', 'https://softdongle.info:3000',
#     'http://softdongle.info:3002', 'https://softdongle.info:3002',
#     'http://api.creablo.de', 'https://api.creablo.de',
#     'http://app.creablo.de', 'https://app.creablo.de'
#     ]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

if DEBUG:
    MIDDLEWARE.append('debug_toolbar.middleware.DebugToolbarMiddleware')
    

ROOT_URLCONF = f'{PROJECT_NAME}.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR, os.path.join(BASE_DIR, 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

AUTHENTICATION_BACKENDS = [
    # Needed to login by username in Django admin, regardless of `allauth`
    # 'django.contrib.auth.backends.ModelBackend',
    'auths.overrides.auth_backend.SDBackend',

    # `allauth` specific authentication methods, such as login by e-mail
    'allauth.account.auth_backends.AuthenticationBackend',
    'sesame.backends.ModelBackend',
]

SESAME_MAX_AGE = 300

WSGI_APPLICATION = f'{PROJECT_NAME}.wsgi.application'



# Database
# https://docs.djangoproject.com/en/4.1/ref/settings/#databases


IS_PORTABLE_DB = config('PORTABLE_DB', default=True, cast=bool)

# django.db.utils.OperationalError: error in trigger ISO_metadata_reference_row_id_value_insert: no such column: rowid
# python manage.py shell -c "import django;django.db.connection.cursor().execute('SELECT InitSpatialMetaData(1);')";
if IS_PORTABLE_DB:
    DATABASES = {
        'default': {
            'ENGINE': 'django.contrib.gis.db.backends.spatialite' if 'django.contrib.gis' in INSTALLED_APPS else 'django.db.backends.sqlite3',
            'NAME': BASE_DIR/'db.sqlite3',
        }
    }
else:
    DATABASES = {
        'default': {
            'ENGINE': 'django.contrib.gis.db.backends.postgis' if 'django.contrib.gis' in INSTALLED_APPS else 'django.db.backends.postgresql_psycopg2',
            'NAME': config('DB_NAME', default="database"), 
            'USER': config('DB_USER', default="postgres"),
            'PASSWORD': config('DB_PASSWORD', default="password"),
            'HOST': config('DB_HOST', default="localhost"), 
            'PORT': config('DB_PORT', default=5432),
            'DISABLE_SERVER_SIDE_CURSORS': True,   # <------ Only for PostgreSQL
        },
        'default-1': {
            'ENGINE': 'django.contrib.gis.db.backends.mysql'  if 'django.contrib.gis' in INSTALLED_APPS else 'django.db.backends.mysql',
            'NAME': config('DB_NAME', default="database"),
            'USER': config('DB_USER', default="root"),
            'PASSWORD': config('DB_PASSWORD', default="password"),
            'HOST': config('DB_HOST', default="localhost"),
            'PORT': config('DB_PORT', default=3306),
            'CHARSET': 'utf8mb4',
            'COLLATION': 'utf8mb4_unicode_ci',
            'OPTIONS': {
                # 'local_infile': 1,
                'use_unicode': True,
                'charset': 'utf8mb4',
                'init_command': "SET sql_mode='STRICT_TRANS_TABLES'",
                # 'init_command': "SET default_storage_engine='INNODB'",
                # "init_command": "SET foreign_key_checks = 0;",

                # 'sslmode': 'verify-full',
                # 'sslrootcert': os.path.join(BASE_DIR, 'rds-ca-2019-root.pem')
            }
        }
    }


# Password validation
# https://docs.djangoproject.com/en/4.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator'},
    {'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator'},
    {'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator'},
    {'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator'},
]



# Internationalization
# https://docs.djangoproject.com/en/4.0/topics/i18n/

LANGUAGE_CODE = 'en-us'
TIME_ZONE = config('TIME_ZONE', default='UTC') 
USE_I18N = True
USE_L10N = True
USE_TZ = True
USE_THOUSAND_SEPARATOR = True
DECIMAL_SEPARATOR = '.'
THOUSAND_SEPARATOR = ','
DATE_INPUT_FORMATS = [
    '%Y-%m-%d',  # '2006-10-25'
    '%m/%d/%Y',  # '10/25/2006'
    '%m/%d/%y',  # '10/25/06'
    '%b %d %Y',  # 'Oct 25 2006'
    '%b %d, %Y',  # 'Oct 25, 2006'
    '%d %b %Y',  # '25 Oct 2006'
    '%d %b, %Y',  # '25 Oct, 2006'
    '%B %d %Y',  # 'October 25 2006'
    '%B %d, %Y',  # 'October 25, 2006'
    '%d %B %Y',  # '25 October 2006'
    '%d %B, %Y',  # '25 October, 2006'
]
DATETIME_INPUT_FORMATS = [
    '%Y-%m-%d %H:%M:%S',     # '2006-10-25 14:30:59'
    '%Y-%m-%d %H:%M:%S.%f',  # '2006-10-25 14:30:59.000200'
    '%Y-%m-%d %H:%M',        # '2006-10-25 14:30'
    '%m/%d/%Y %H:%M:%S',     # '10/25/2006 14:30:59'
    '%m/%d/%Y %H:%M:%S.%f',  # '10/25/2006 14:30:59.000200'
    '%m/%d/%Y %H:%M',        # '10/25/2006 14:30'
    '%m/%d/%y %H:%M:%S',     # '10/25/06 14:30:59'
    '%m/%d/%y %H:%M:%S.%f',  # '10/25/06 14:30:59.000200'
    '%m/%d/%y %H:%M',        # '10/25/06 14:30'
]

CACHES = {
    "default": {
        "BACKEND": "django_redis.cache.RedisCache",
        "LOCATION": f"redis://{config('REDIS_SERVER', default='127.0.0.1')}:{config('REDIS_PORT', default=6379, cast=int)}/1",
        "OPTIONS": {
            "CONNECTION_POOL_KWARGS": {"max_connections": 200},
            "CLIENT_CLASS": "django_redis.client.DefaultClient",
            # "PASSWORD": "mysecret",
            "PICKLE_VERSION": -1,  # Use the latest protocol version available
            "SOCKET_CONNECT_TIMEOUT": 5,  # in seconds
            "SOCKET_TIMEOUT": 5,  # in seconds
            "IGNORE_EXCEPTIONS": True,
        }
    },
    "websocket": {
        "BACKEND": "django_redis.cache.RedisCache",
        "LOCATION": f"redis://{config('REDIS_SERVER', default='127.0.0.1')}:{config('REDIS_PORT', default=6379, cast=int)}/2",
        "OPTIONS": {
            "CONNECTION_POOL_KWARGS": {"max_connections": 1000},
            "CLIENT_CLASS": "django_redis.client.DefaultClient",
            # "PASSWORD": "mysecret",
            "PICKLE_VERSION": -1,  # Use the latest protocol version available
            "SOCKET_CONNECT_TIMEOUT": 5,  # in seconds
            "SOCKET_TIMEOUT": 5,  # in seconds
            "IGNORE_EXCEPTIONS": True,
        }
    }
}

DJANGO_NOTIFICATIONS_CONFIG = { 'USE_JSONFIELD': True}
DJANGO_NOTIFICATIONS_CONFIG = { 'SOFT_DELETE': True}

# Configure 'django-redis' as session backend
SESSION_ENGINE = "django.contrib.sessions.backends.cache"
SESSION_CACHE_ALIAS = "default"

DJANGO_REDIS_LOG_IGNORED_EXCEPTIONS = True

CELERY_BROKER_TRANSPORT = 'redis'
CELERY_BROKER_URL = 'redis://{}:{}/0'.format(config('REDIS_SERVER', default='127.0.0.1'), config('REDIS_PORT', default=6379, cast=int))
# Maps to redis host.
CELERY_BROKER_HOST = config('REDIS_SERVER', default='127.0.0.1')
# Maps to redis port.
CELERY_BROKER_PORT = config('REDIS_PORT', default=6379, cast=int)
CELERY_BROKER_VHOST = "0"  # Maps to database number.

CELERY_RESULT_BACKEND = "redis"
CELERY_REDIS_HOST = config('REDIS_SERVER', default='127.0.0.1')
CELERY_REDIS_PORT = config('REDIS_PORT', default=6379, cast=int)
# CELERY_RESULT_PASSWORD =
CELERY_REDIS_DB = 0

# Track Task State
CELERY_TRACK_STARTED = True
CELERY_TASK_RESULT_EXPIRES = 60 * 60 * 24

CELERY_ALWAYS_EAGER = False
CELERY_TASK_ALWAYS_EAGER = False
CELERY_IGNORE_RESULT = False

#: Only add pickle to this list if your broker is secured
#: from unwanted access (see userguide/security.html)
CELERY_ACCEPT_CONTENT = ['json', 'pickle']
CELERY_TASK_SERIALIZER = 'json'
CELERY_RESULT_SERIALIZER = 'json'
CELERY_TIMEZONE = 'UTC'

CELERY_BEAT_SCHEDULER = 'django_celery_beat.schedulers:DatabaseScheduler'

CELERYD_CONCURRENCY = 2
CELERYD_MAX_TASKS_PER_CHILD = 4
CELERYD_PREFETCH_MULTIPLIER = 1

# celery queues setup

# CELERY_DEFAULT_QUEUE = 'default'
# CELERY_DEFAULT_EXCHANGE_TYPE = 'topic'  # topic or direct (default auto)
# CELERY_DEFAULT_ROUTING_KEY = 'default'
# CELERY_QUEUES = (
#     Queue('default', Exchange('default'), routing_key='default'),
#     Queue('heavy_task', Exchange('heavy_task'), routing_key='long_tasks'),
# )
#
# CELERY_ROUTES = {
#     'estate.core.tasks.Sometask': {
#         'queue': 'heavy_task',
#         'routing_key': 'long_tasks',
#     },
# }


# https://stackoverflow.com/questions/10079816/route-celery-task-to-specific-queue
# https://stackoverflow.com/questions/23129967/django-celery-multiple-queues-on-localhost-routing-not-working


# https://stackoverflow.com/questions/55190498/413-payload-too-large-on-django-server
# https://docs.djangoproject.com/en/dev/ref/settings/#std:setting-DATA_UPLOAD_MAX_MEMORY_SIZE
DATA_UPLOAD_MAX_MEMORY_SIZE = 100*1024*1024  # 100MB


STATIC_ROOT = os.path.join(BASE_DIR, 'static')
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.0/howto/static-files/


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.0/howto/static-files/

MEDIA_URL = '/media/'
STATIC_URL = '/static/'


# Default primary key field type
# https://docs.djangoproject.com/en/4.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

IMPORT_EXPORT_USE_TRANSACTIONS = True


# You can tell Django to stop reporting particular 404s by tweaking the IGNORABLE_404_URLS setting.
IGNORABLE_404_URLS = [
    re.compile(r'\.(php|cgi)$'),
    re.compile(r'^/phpmyadmin/'),
    re.compile(r'^/apple-touch-icon.*\.png$'),
    re.compile(r'^/favicon\.ico$'),
    re.compile(r'^/robots\.txt$'),
    re.compile(r'^/ads\.txt$'),
]
LOGGING_LEVEL = logging.INFO


LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'filters': {
        'require_debug_false': {
            '()': 'django.utils.log.RequireDebugFalse'
        }
    },

    'formatters': {
        'verbose': {
            # ERROR|25/Apr/2017 17:30:22|basehttp|25069|139803081283328|"POST /system/secured/admin/core/package/add/ HTTP/1.1" 500 59
            'format': '%(levelname)s|%(asctime)s|%(module)s|%(process)d|%(thread)d|%(message)s',
            'datefmt': "%Y-%d-%b %H:%M:%S"
        },
        'standard': {
            # [ERROR]25-Apr-2017 17:52:24|django.server|"POST /system/secured/admin/core/package/add/ HTTP/1.1" 500 59
            'format': '[%(levelname)s]%(asctime)s|%(name)s|%(message)s',
            'datefmt': "%Y-%m-%d %H:%M:%S"
        },
        'simple': {'format': '%(levelname)s|%(asctime)s|%(message)s', 'datefmt': "%Y-%m-%d %H:%M:%S"},
        'too-simple': {'format': '%(message)s'},
    },

    'handlers': {
        'null': {
            'level': LOGGING_LEVEL,
            'class': 'logging.NullHandler',
        },
        'mail_admins': {
            'level': 'ERROR',
            'filters': ['require_debug_false'],
            'class': 'django.utils.log.AdminEmailHandler',
            'include_html': True,
            'email_backend': 'django.core.mail.backends.smtp.EmailBackend',
        },
        'console': {
            'level': 'INFO',
            'class': 'logging.StreamHandler',
            'formatter': 'too-simple',
            'stream': sys.stdout,
        },
        'log_file': {
            'level': LOGGING_LEVEL,
            'class': 'logging.handlers.RotatingFileHandler',
            'filename': os.path.join(BASE_DIR, settings.PROJECT_NAME + '.log'),
            'maxBytes': 1024 * 1024 * 5,  # 5MB
            'backupCount': 5,
            'formatter': 'standard',
        },
    },

    'loggers': {
        'auths.*': {
            'handlers': ['mail_admins', 'console', 'log_file'],
            'propagate': True,
        },
        'accounting.*': {
            'handlers': ['mail_admins', 'console', 'log_file'],
            'propagate': True,
        },
        'alert.*': {
            'handlers': ['mail_admins', 'console', 'log_file'],
            'propagate': True,
        },
        'communication.*': {
            'handlers': ['mail_admins', 'console', 'log_file'],
            'propagate': True,
        },
        'contact.*': {
            'handlers': ['mail_admins', 'console', 'log_file'],
            'propagate': True,
        },
        'core.*': {
            'handlers': ['mail_admins', 'console', 'log_file'],
            'propagate': True,
        },
        'process.*': {
            'handlers': ['mail_admins', 'console', 'log_file'],
            'propagate': True,
        },
        'lease.*': {
            'handlers': ['mail_admins', 'console', 'log_file'],
            'propagate': True,
        },
        'maintenance.*': {
            'handlers': ['mail_admins', 'console', 'log_file'],
            'propagate': True,
        },
        'success.*': {
            'handlers': ['mail_admins', 'console', 'log_file'],
            'propagate': True,
        },
        'team.*': {
            'handlers': ['mail_admins', 'console', 'log_file'],
            'propagate': True,
        },
        'timer.*': {
            'handlers': ['mail_admins', 'console', 'log_file'],
            'propagate': True,
        },
        '*': {
            'handlers': ['mail_admins', 'console', 'log_file'],
            'propagate': True,
        },
        'tasks': {
            'handlers': ['mail_admins', 'console', 'log_file'],
            'propagate': True,
        },
        'django.db.backends': {
            'handlers': ['log_file'],
            'propagate': True,
        },
        'django.security.*': {
            'handlers': ['mail_admins', 'log_file'],
            'propagate': True,
        },
        'django.security.DisallowedHost': {
            'handlers': ['null'],
            'propagate': False,
        },
        'django_redis.cache': {
            'handlers': ['log_file', 'console'],
            'propagate': True,
        },
        'django.request': {
            'handlers': ['mail_admins', 'log_file'],
            'level': 'ERROR',
            'propagate': True,
        },
        'django': {
            'handlers': ['log_file', 'console'],
            'propagate': True,
        },
        'root': {
            'handlers': ['console'],
        }
    },
}
