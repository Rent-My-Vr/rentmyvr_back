# Generated by Django 4.1.5 on 2023-01-16 12:51

import auths.models
from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('email', models.EmailField(error_messages={'unique': 'A user with that email already exists.'}, help_text='Required valid email with 128 characters or fewer', max_length=128, unique=True, verbose_name='email address')),
                ('username', models.CharField(blank=True, default=None, help_text='Required 20 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=20, null=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('phone', models.CharField(blank=True, default=None, max_length=15, null=True, verbose_name='phone number')),
                ('is_active', models.BooleanField(choices=[(True, 'Active'), (False, 'Inactive')], default=True, verbose_name='status')),
                ('email_verified', models.BooleanField(default=False, verbose_name='email verified')),
                ('phone_verified', models.BooleanField(default=False, verbose_name='phone verified')),
                ('is_manager', models.BooleanField(default=False, help_text="This is company's superuser", verbose_name='manager')),
                ('failed_attempts', models.IntegerField(default=0, verbose_name='failed attempts')),
                ('last_password_change', models.DateTimeField(blank=True, default=None, null=True, verbose_name='last password change')),
                ('force_password_change', models.BooleanField(default=True, verbose_name='force password change')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('cert', auths.models.CredentialsField(blank=True, default=None, null=True)),
                ('remember', models.IntegerField(default=0, verbose_name='Remember me')),
                ('blacklist_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_blacklist', related_query_name='userb', to='auth.permission', verbose_name='user permissions blacklist')),
            ],
            options={
                'db_table': 'auths_user',
                'abstract': False,
                'swappable': 'AUTH_USER_MODEL',
            },
            managers=[
                ('objects', auths.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='UserOTP',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('otp_type', models.CharField(choices=[('HOTP', 'hotp'), ('TOTP', 'totp')], max_length=20)),
                ('secret_key', models.CharField(blank=True, max_length=100)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.PROTECT, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='UserRecoveryCodes',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('secret_code', models.CharField(max_length=10)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='auths.userotp')),
            ],
        ),
        migrations.CreateModel(
            name='U2FKey',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('last_used_at', models.DateTimeField(null=True)),
                ('public_key', models.TextField()),
                ('key_handle', models.TextField()),
                ('app_id', models.TextField()),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='u2f_keys', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='PasswordHistory',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('harsh', models.CharField(max_length=128)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'account_password_history',
            },
        ),
        migrations.CreateModel(
            name='CustomGroup',
            fields=[
                ('group_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='auth.group')),
                ('is_default', models.BooleanField(default=False, verbose_name='is default')),
                ('parent', models.ForeignKey(default=None, null=True, on_delete=django.db.models.deletion.CASCADE, to='auths.customgroup')),
                ('updated_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name_plural': 'CustomGroups',
            },
            bases=('auth.group',),
            managers=[
                ('objects', django.contrib.auth.models.GroupManager()),
            ],
        ),
        migrations.CreateModel(
            name='AuthSession',
            fields=[
                ('session_key', models.CharField(max_length=40, primary_key=True, serialize=False, verbose_name='session key')),
                ('session_data', models.TextField(verbose_name='session data')),
                ('expire_date', models.DateTimeField(db_index=True, verbose_name='expire date')),
                ('user', models.ForeignKey(blank=True, default=None, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'account_auth_session',
            },
        ),
        migrations.CreateModel(
            name='Audit',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('ip', models.GenericIPAddressField(blank=True, null=True, verbose_name='ip address')),
                ('session_key', models.CharField(blank=True, default=None, max_length=40, null=True, verbose_name='session key')),
                ('created', models.DateTimeField(auto_now_add=True, verbose_name='created')),
                ('last_seen', models.DateTimeField(blank=True, default=None, null=True, verbose_name='last seen')),
                ('username', models.CharField(max_length=254, verbose_name='username')),
                ('fingerprint', models.CharField(max_length=32, verbose_name='fingerprint')),
                ('auth_backend', models.CharField(choices=[('Password', 'Password'), ('Facebook', 'Facebook'), ('Google', 'Google'), ('Twitter', 'Twitter'), ('Yahoo', 'Yahoo'), ('LinkedIn', 'LinkedIn'), ('Instagram', 'Instagram'), ('Amazon', 'Amazon'), ('Dropbox', 'Dropbox'), ('Github', 'Github'), ('GitLab', 'GitLab'), ('Stackoverflow', 'Stackoverflow')], default='Password', max_length=14, verbose_name='authenticated via')),
                ('auth_status', models.CharField(choices=[('Failed', 'Failed'), ('Successful', 'Successful')], default='Successful', max_length=10, verbose_name='authentication status')),
                ('session_status', models.CharField(choices=[('Active', 'Active'), ('Anonymous', 'Anonymous'), ('Expired', 'Expired'), ('Invalidated', 'Invalidated'), ('Logged Out', 'Logged Out')], default='Anonymous', max_length=12, verbose_name='session status')),
                ('browser', models.CharField(blank=True, max_length=16, null=True, verbose_name='browser')),
                ('browser_version', models.CharField(blank=True, max_length=16, null=True, verbose_name='browser version')),
                ('os', models.CharField(blank=True, max_length=16, null=True, verbose_name='operating system (OS)')),
                ('os_version', models.CharField(blank=True, max_length=16, null=True, verbose_name='OS version')),
                ('current_resolution', models.CharField(blank=True, max_length=16, null=True, verbose_name='current resolution')),
                ('available_resolution', models.CharField(blank=True, max_length=16, null=True, verbose_name='available resolution')),
                ('device', models.CharField(blank=True, max_length=32, null=True, verbose_name='device')),
                ('language', models.CharField(blank=True, max_length=254, null=True, verbose_name='language')),
                ('timezone', models.CharField(blank=True, max_length=64, null=True, verbose_name='timezone')),
                ('user', models.ForeignKey(blank=True, default=None, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'account_audit',
            },
        ),
        migrations.AddField(
            model_name='user',
            name='groups',
            field=models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auths.customgroup', verbose_name='groups'),
        ),
        migrations.AddField(
            model_name='user',
            name='last_login_signature',
            field=models.ForeignKey(blank=True, default=None, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='signatures', related_query_name='signature', to='auths.audit'),
        ),
        migrations.AddField(
            model_name='user',
            name='user_permissions',
            field=models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions'),
        ),
    ]
